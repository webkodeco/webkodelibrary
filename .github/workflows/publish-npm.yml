name: Publish Angular lib to npm

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Garantiza que el tag pertenece a main
      - name: Ensure tag commit is contained in main
        run: |
          git fetch --no-tags origin main
          if git merge-base --is-ancestor "$GITHUB_SHA" "origin/main"; then
            echo "âœ… Tag pertenece a main"
          else
            echo "â›” Tag NO pertenece a main"
            exit 78
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install deps
        run: npm ci

      # Detecta el primer proyecto tipo "library" en angular.json
      - name: Detect Angular library project
        id: detect
        run: |
          node -e "const a=require('./angular.json'); const name=Object.keys(a.projects).find(p=>a.projects[p].projectType==='library'); if(!name){process.exit(2)}; console.log(name)" > .libname
          echo "name=$(cat .libname)" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Library: $(cat .libname)"

      # Compila SIN depender de scripts del package.json
      - name: Build lib with Angular CLI
        run: npx -y @angular/cli build ${{ steps.detect.outputs.name }}

      - name: Resolve dist path
        id: dist
        env:
          LIB_NAME: ${{ steps.detect.outputs.name }}
        run: |
          # imprime y resuelve el outputPath sin usar backticks
          node -e '
            const a = require("./angular.json");
            const n = process.env.LIB_NAME;
            const p = a.projects[n] || {};
            // Soporta angular.json con architect (v<15) y targets (v15+)
            const op =
              (p.architect && p.architect.build && p.architect.build.options && p.architect.build.options.outputPath) ||
              (p.targets   && p.targets.build   && p.targets.build.options   && p.targets.build.options.outputPath) ||
              ("dist/" + n);
            console.log(op);
          ' > .distpath

          echo "path=$(cat .distpath)" >> "$GITHUB_OUTPUT"
          echo "ðŸ“‚ Dist: $(cat .distpath)"
          test -d "$(cat .distpath)" || (echo "No existe carpeta dist" && exit 1)
          ls -la "$(cat .distpath)"

      # Sincroniza versiÃ³n con el tag (vX.Y.Z)
      - name: Sync version with tag (in dist)
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "Version: $VERSION"
          cd "${{ steps.dist.outputs.path }}"
          npm version "$VERSION" --no-git-tag-version

      # Verifica versiÃ³n
      - name: Check version = tag (dist)
        run: |
          cd "${{ steps.dist.outputs.path }}"
          PKG_VERSION=$(node -p "require('./package.json').version")
          test "$PKG_VERSION" = "${GITHUB_REF_NAME#v}" || (echo "dist package.json ($PKG_VERSION) != tag (${GITHUB_REF_NAME#v})" && exit 1)

      # Publica
      - name: Publish from dist
        working-directory: ${{ steps.dist.outputs.path }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --provenance
